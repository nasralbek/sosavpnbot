import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

BOT_TOKEN = '7518561707:AAGhfU3wyVR2Sf30u3Sk1e2Mxteb8UbBI-k'
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN')],
        [KeyboardButton(text='üè† –ü—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')]
    ],
    resize_keyboard=True
)

async def init_db():
    async with aiosqlite.connect('db.sqlite3') as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                invited_by INTEGER,
                referrals INTEGER DEFAULT 0
            )
        """)
        await db.commit()

async def register_user(user_id, ref=None):
    async with aiosqlite.connect('db.sqlite3') as db:
        user = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        result = await user.fetchone()

        if result is None:
            if ref and int(ref) != user_id:
                await db.execute("INSERT INTO users (user_id, balance, invited_by) VALUES (?, ?, ?)", (user_id, 100, ref))
                await db.execute("UPDATE users SET balance = balance + 50, referrals = referrals + 1 WHERE user_id = ?", (ref,))
                await db.commit()

                try:
                    await bot.send_message(ref, "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50‚ÇΩ.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: {e}")

                try:
                    await bot.send_message(user_id, "üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            else:
                await db.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 0))
                await db.commit()

@dp.message(lambda message: message.text.startswith("/start"))
async def handle_start(message: types.Message):
    ref = message.text.split(" ")[1] if len(message.text.split()) > 1 else None
    await register_user(message.from_user.id, ref)

    photo = FSInputFile("vpn_banner.jpg")
    welcome_caption = (
        "–Ø –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ Sosa VPN!\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é c –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞—â–∏—Ç–æ–π –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–≥–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.\n"
        "–í—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ Telegram."
    )
    await message.answer_photo(photo=photo, caption=welcome_caption)
    await message.answer("–í—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN")
async def handle_get_key(message: types.Message):
    photo = FSInputFile("vpn_banner.jpg")
    caption = (
        "‚ö°Ô∏è –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Sosa VPN.\n\n"
        "‚Ä¢ –î–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
        "‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫—É"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        #[InlineKeyboardButton(text="7 –¥–Ω–µ–π ‚Äî 50‚ÇΩ", callback_data="confirm_vpn_7")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ‚Äî 100‚ÇΩ", callback_data="confirm_vpn_30")]
    ])
    await message.answer_photo(photo=photo, caption=caption, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("confirm_vpn_"))
async def confirm_vpn(callback: types.CallbackQuery):
    if callback.data == "confirm_vpn_7":
        days = 7
        cost = 50
        purchase_code = "vpn_7"
    else:
        days = 30
        cost = 100
        purchase_code = "vpn_30"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=purchase_code)]
    ])
    await callback.message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å VPN –Ω–∞ {days} –¥–Ω–µ–π.\n"
        f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {cost}‚ÇΩ.",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("vpn_"))
async def handle_vpn_purchase(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if callback.data == "vpn_7":
        days = 7
        cost = 50
        key_file = "keys_7.txt"
    else:
        days = 30
        cost = 100
        key_file = "keys_30.txt"

    async with aiosqlite.connect("db.sqlite3") as db:
        user = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        data = await user.fetchone()
        balance = data[0] if data else 0

        if balance < cost:
            await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        try:
            with open(key_file, "r", encoding="utf-8") as f:
                keys = f.readlines()
        except FileNotFoundError:
            await callback.message.answer("‚ùå –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if not keys:
            await callback.message.answer("‚ùå –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return

        key = keys[0].strip()
        with open(key_file, "w", encoding="utf-8") as f:
            f.writelines(keys[1:])

        await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (cost, user_id))
        await db.commit()

    instruction_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± iOS", callback_data="how_ios"),
         InlineKeyboardButton(text="ü§ñ Android", callback_data="how_android")],
        [InlineKeyboardButton(text="ü™ü Windows", callback_data="how_windows"),
         InlineKeyboardButton(text="üíª MacOS", callback_data="how_macos")]
    ])

    await callback.message.answer(
        f"üîë –¢–≤–æ–π VPN-–∫–ª—é—á –Ω–∞ {days} –¥–Ω–µ–π:\n\n<code>{key}</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=instruction_buttons
    )

@dp.callback_query(lambda c: c.data.startswith("how_"))
async def handle_instructions(callback: types.CallbackQuery):
    data = callback.data
    if data == "how_ios":
        text = (
            "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS</b>:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏ Hiddify –∏–∑ App Store.\n"
            "2. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ ‚Äú+‚Äù.\n"
            "3. –í—ã–±–µ—Ä–∏ ‚Äú–ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞‚Äù.\n"
            "4. –í—Å—Ç–∞–≤—å –∫–ª—é—á –∏ –Ω–∞–∂–º–∏ ‚Äú–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚Äù.\n"
            "5. –ù–∞–∂–º–∏ ‚Äú–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è‚Äù."
        )
    elif data == "how_android":
        text = (
            "ü§ñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android</b>:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏ Hiddify –∏–∑ Google Play –∏–ª–∏ —Å —Å–∞–π—Ç–∞ hiddify.com.\n"
            "2. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ ‚Äú+‚Äù.\n"
            "3. –í—ã–±–µ—Ä–∏ ‚Äú–ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞‚Äù.\n"
            "4. –í—Å—Ç–∞–≤—å –∫–ª—é—á –∏ –Ω–∞–∂–º–∏ ‚Äú–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚Äù.\n"
            "5. –ù–∞–∂–º–∏ ‚Äú–°—Ç–∞—Ä—Ç‚Äù –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
    elif data == "how_windows":
        text = (
            "ü™ü <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows</b>:\n"
            "1. –°–∫–∞—á–∞–π Hiddify —Å —Å–∞–π—Ç–∞ hiddify.com.\n"
            "2. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏ –æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É.\n"
            "3. –ù–∞–∂–º–∏ ‚Äú–ò–º–ø–æ—Ä—Ç ‚Üí –ò–∑ —Ç–µ–∫—Å—Ç–∞‚Äù.\n"
            "4. –í—Å—Ç–∞–≤—å –∫–ª—é—á –∏ –Ω–∞–∂–º–∏ ‚Äú–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å‚Äù.\n"
            "5. –ù–∞–∂–º–∏ ‚Äú–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è‚Äù."
        )
    elif data == "how_macos":
        text = (
            "üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è MacOS</b>:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏ Hiddify —Å —Å–∞–π—Ç–∞ hiddify.com.\n"
            "2. –û—Ç–∫—Ä–æ–π –∏ –Ω–∞–∂–º–∏ ‚Äú+‚Äù.\n"
            "3. –í—ã–±–µ—Ä–∏ ‚Äú–ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞‚Äù.\n"
            "4. –í—Å—Ç–∞–≤—å –∫–ª—é—á –∏ –Ω–∞–∂–º–∏ ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù.\n"
            "5. –ù–∞–∂–º–∏ ‚Äú–°—Ç–∞—Ä—Ç‚Äù –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
        )
    else:
        text = "‚ùó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    await callback.message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "üè† –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("db.sqlite3") as db:
        user = await db.execute("SELECT balance, referrals FROM users WHERE user_id = ?", (user_id,))
        data = await user.fetchone()

    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    balance = data[0] if data else 0
    refs = data[1] if data else 0

    msg = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {refs} —á–µ–ª.\n\n"
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}"
    )
    await message.answer(msg, parse_mode=ParseMode.HTML)

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info(message: types.Message):
    text = (
        "Sosa VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –Ω–∞–∏–ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, "
        "–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏. –í—Å–µ –Ω–∞—à–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Å–Ω–∞—â–µ–Ω—ã –∫–∞–Ω–∞–ª–æ–º 1 –≥–±–∏—Ç/—Å.\n\n"
        "–ñ—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤ —É–¥–∞–ª—è–µ—Ç—Å—è —Å –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π, –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç –º–Ω–æ–≥–∏—Ö "
        "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏ –Ω–µ –ø—Ä–æ–¥–∞—ë–º –∫–∞–∫–∏–µ –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –æ –í–∞—Å.\n\n"
        "–î–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram, –≤ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –Ω–∞—Å –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å "
        "–∏–∑ App Store –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫."
    )
    support_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", url="https://t.me/nasralbek")]
    ])
    await message.answer(text, reply_markup=support_button)

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
