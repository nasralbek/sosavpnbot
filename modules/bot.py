from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
import asyncio 
import configs.main_config as config
import configs.texts.texts as texts
from modules.yookassa_handler import Yookassa_handler
from modules.keys_handler import Keys_handler
from modules.keys_notify_db import Keys_notify_DB
from modules.keys_db import Keys_DB


class vpnBot():
    def __init__(self,db):
        self.BOT_TOKEN = config.TELERAM_API_KEY
        self.bot = Bot(token=self.BOT_TOKEN)
        self.dp = Dispatcher()
        self.yookassa_handler = Yookassa_handler()
        self.keys_handler=  Keys_handler()
        self.init_keyboards()
        self.init_handlers()
        self.users_db = db
        self.keys_notify_db = Keys_notify_DB(config.db_filename)
        self.keys_db = Keys_DB(config.db_filename)
        self.sosa_vpn_banner = FSInputFile("./src/vpn_banner.jpg")


    def init_keyboards(self):
        self.main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text='‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN')],
                [KeyboardButton(text='üè† –ü—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')]
            ],
            resize_keyboard=True
        )

    def init_handlers(self):
        @self.dp.message(lambda message: message.text.startswith("/start"))
        async def handle_start(message: types.Message):
            ref = message.text.split(" ")[1] if len(message.text.split()) > 1 else None
            user_id = message.from_user.id
            register_status = await self.users_db.register_user(user_id, ref)


            welcome_caption = texts.welcome_text
            await message.answer_photo(photo=self.sosa_vpn_banner, caption=welcome_caption,reply_markup=self.main_keyboard)

            if register_status.ok():
                if not (register_status.refferal is None):
                    try:
                        await self.bot.send_message(ref, "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50‚ÇΩ.")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: {e}")
                    try:
                        await self.bot.send_message(user_id, "üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

            # await message.answer("–í—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=self.main_keyboard)

        @self.dp.message(lambda message: message.text == "‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN")
        async def handle_get_key(message: types.Message):
            
            caption = (
                "‚ö°Ô∏è –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Sosa VPN.\n\n"
                "‚Ä¢ –î–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
                "‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫—É"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                #[InlineKeyboardButton(text="7 –¥–Ω–µ–π ‚Äî 50‚ÇΩ", callback_data="confirm_vpn_7")],
                [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ‚Äî 100‚ÇΩ", callback_data="select_vpn_30")]
            ])
            await message.answer_photo(photo=self.sosa_vpn_banner, caption=caption, reply_markup=keyboard)

        @self.dp.callback_query(lambda c: c.data.startswith("select_vpn_"))
        async def handle_select_vpn(callback: types.CallbackQuery):
            match callback.data:
                case "select_vpn_30":
                    days = 30
                    cost = 100
                    purchase_code = "vpn_30"
                case "select_vpn_7":
                    days = 7
                    cost = 50
                    purchase_code = "vpn_7"    
            msg_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±–æ –æ–ø–ª–∞—Ç—ã"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ yoomoney", callback_data="confirm_vpn_yoomoney_{days}")],
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏", callback_data="confirm_vpn_bonuses_{days}")]
            ])
            await callback.message.edit_caption(caption = msg_text,reply_markup=keyboard)


        @self.dp.callback_query(lambda c: c.data.startswith("confirm_vpn_"))
        async def confirm_vpn(callback: types.CallbackQuery):
            if callback.data == "confirm_vpn_7":
                days = 7
                cost = 50
                purchase_code = "vpn_7"
            else:
                days = 30
                cost = 100
                purchase_code = "vpn_30"

            #print(callback)
            if "bonuses" in callback.data:
                msg_text =  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å VPN –Ω–∞ {days} –¥–Ω–µ–π.\n"\
                            f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {cost}‚ÇΩ."
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=purchase_code)]
                ])
            elif "yoomoney" in callback.data:
                url = await self.yookassa_handler.create_payment(callback.from_user.id,cost)
                msg_text =  f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n" \
                            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã vpn:\n"\
                            f"{url}"
                keyboard = InlineKeyboardMarkup(inline_keyboard = [])
            await callback.message.edit_caption(caption = msg_text,reply_markup=keyboard)

        @self.dp.callback_query(lambda c: c.data.startswith("vpn_"))
        async def handle_vpn_purchase(callback: types.CallbackQuery):
            user_id = callback.from_user.id
            if callback.data == "vpn_7":
                days = 7
                cost = 50
                key_file = "../data/keys/keys_7.txt"
            else:
                days = 30
                cost = 100
                key_file = "../data/keys/keys_30.txt"
            
            
            if "balance" in callback.data:
                balance = await self.users_db.get_balance(user_id)
                if balance < cost:
                    await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
                    return
                try:
                    with open(key_file, "r", encoding="utf-8") as f:
                        keys = f.readlines()
                except FileNotFoundError:
                    await callback.message.answer("‚ùå –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                if not keys:
                    await callback.message.answer("‚ùå –ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                    return

            key = keys[0].strip()
            with open(key_file, "w", encoding="utf-8") as f:
                f.writelines(keys[1:])

            await self.users_db.increase_balance(user_id,-cost)

            instruction_buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì± iOS", callback_data="how_ios"),
                InlineKeyboardButton(text="ü§ñ Android", callback_data="how_android")],
                [InlineKeyboardButton(text="ü™ü Windows", callback_data="how_windows"),
                InlineKeyboardButton(text="üíª MacOS", callback_data="how_macos")]
            ])

            await callback.message.answer(
                f"üîë –¢–≤–æ–π VPN-–∫–ª—é—á –Ω–∞ {days} –¥–Ω–µ–π:\n\n<code>{key}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=instruction_buttons
            )

        @self.dp.callback_query(lambda c: c.data.startswith("how_"))
        async def handle_instructions(callback: types.CallbackQuery):
            data = callback.data
            if data == "how_ios":
                text = texts.how_ios
            elif data == "how_android":
                text = texts.how_android
            elif data == "how_windows":
                text = texts.how_windows
            elif data == "how_macos":
                text = texts.how_macos
            else:
                text = "‚ùó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

            await callback.message.answer(text, parse_mode=ParseMode.HTML)

        @self.dp.message(lambda message: message.text == "üè† –ü—Ä–æ—Ñ–∏–ª—å")
        async def handle_profile(message: types.Message):
            user_id = message.from_user.id
            ref_link = f"https://t.me/{(await self.bot.get_me()).username}?start={user_id}"
            balance = await self.users_db.get_balance(user_id)
            refs = await self.users_db.get_refs(user_id)
            msg = (
                f"–ë–∞–ª–∞–Ω—Å: <b>{balance}</b>‚ÇΩ\n"
                f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{refs} —á–µ–ª.</b>\n\n"
                f"üîó –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 50‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å, –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç 100‚ÇΩ.\n\n"
                f"üë• <b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{ref_link}\n"
            )
            await message.answer(msg, parse_mode=ParseMode.HTML)

        @self.dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        async def handle_info(message: types.Message):
            text = texts.info
            support_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", url="https://t.me/nasralbek")]
            ])
            await message.answer(text, reply_markup=support_button)

    async def start_polling_pending_notifications(self):
        while True:
            try:
                pending_notifies = await self.keys_notify_db.get_by_notified(notified_status = False)
                for pending_notification in pending_notifies:
                    uuid = pending_notification.uuid_in_keys
                    key = await self.keys_db.get_key(uuid)
                    user_id = await self.keys_db.get_user_id(uuid)
                    #print(key,user_id)
                    try:
                        await self.bot.send_message(chat_id = user_id,text = f"–≤–∞—à –∫–ª—é—á: \n{key}")
                        await self.keys_notify_db.set_notified(uuid)

                    except Exception as e:
                        print(e)

                
            except Exception as e:
                print(e)
            await asyncio.sleep(1)

    async def start(self):
        yookassa_task = asyncio.create_task(self.yookassa_handler.start_check_payments())
        keys_task = asyncio.create_task(self.keys_handler.start_keys_pending_polling())
        notifies_task = asyncio.create_task(self.start_polling_pending_notifications())
        await self.dp.start_polling(self.bot)
